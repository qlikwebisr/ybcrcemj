//first file for reloading
console.log('load settings', settings);

var config = settings.prod.config;
var app_settings = settings.prod;

//production env - dev-hub
var baseUrl = "https://" + config.host + (config.port ? ":" + config.port : "") + config.prefix + "resources"

if (window.location.hostname == 'localhost') {

	config = settings.local.config;
	app_settings = settings.local;

}

var scriptsUrl = app_settings.scriptsUrl;

//for the test version
if (window.location.hostname == 'qlikwebisr.github.io') {
	scriptsUrl = app_settings.scriptsUrlTest;
}

(async function () {

    //console.log('scriptsUrl', scriptsUrl);
    //console.log('baseUrl', baseUrl);
    
	/**
	 * check third-party cookie
	 * @returns
	 */

	function check3PCookies() {

		return new Promise((resolve, reject) => {

			//console.log('cookieEnabled', navigator.cookieEnabled);

			if (navigator.cookieEnabled) {

				const frame = document.createElement("iframe");
				frame.id = "3pc";
				frame.src =
					"https://chamithrepo.github.io/create-third-party-cookie/"; //Add your hosted domain url here
				frame.style.display = "none";
				frame.style.position = "fixed";
				document.body.appendChild(frame);

				window.addEventListener(

					"message",
					function (event) {

						//console.log('event', event);

						// if (event.data === "3pcSupported" || event.data === "3pcUnsupported") {

						if (typeof event.data != undefined) {

							//console.log('event.data', event.data);

							if (event.data === "3pcSupported") {

								//document.body.removeChild(frame);

								resolve("Third-Party cookies supported");

							} else {

								reject("Third-Party cookies not supported");

							}

						} else {

							reject("Third-Party cookies not supported");

						}
					}
				);


			} else {

				reject("Third-Party cookies not supported");

			}

		});

	}

    /**
     * Check if device is on iOS
     * @returns 
     */
	function iOS() {
		return [
				'iPad Simulator',
				'iPhone Simulator',
				'iPod Simulator',
				'iPad',
				'iPhone',
				'iPod'
			].includes(navigator.platform)
			// iPad on iOS 13 detection
			||
			(navigator.userAgent.includes("Mac") && "ontouchend" in document)
	}

	//function for Open Model
	function openModal() {

		var modal = document.getElementById("modal_ios");
		modal.style.display = "block";

		//console.log('openModal');

		var modal_submit = document.getElementById("modal_submit");

        // window.onclick = function
		/* window.onclick = function (event) {
			if (event.target == modal) {
				modal.style.display = "none";
				//localStorage.setItem("settings_enabled", true);
			}
		} */

		modal_submit.onclick = function () {

			modal.style.display = "none";
			//localStorage.setItem("settings_enabled", true);
		}

		const checkbox = document.getElementById("dont-show");

		checkbox.onchange = function () {
			if (checkbox.checked) {
				console.log("Checkbox is checked.");
				localStorage.setItem("settings_enabled", true);
			}
		}

	}

	//console.log('ios', iOS());

	//simple check only for iOS
	/* if (iOS()) {
		if (localStorage.getItem("settings_enabled") == 'false') {
			openModal();
		}
	} */

	//Check if device iPhone and if third-party cookie enabled
    //if (iOS() == true && localStorage.getItem("settings_enabled") == 'false') {
	if (localStorage.getItem("settings_enabled") == 'false' || localStorage.getItem("settings_enabled") == null ) {

		try {

			const check3PCookiesVal = await check3PCookies();
			console.log('check3PCookiesVal', check3PCookiesVal);

			//disable popup 
			localStorage.setItem("settings_enabled", true);

            console.log('inside try');

			activateMashup();

		} catch (error) {

			openModal();

			console.error(error);

		}

	} else if(localStorage.getItem("settings_enabled") == 'true'){

        activateMashup();
    }
    

	/**
	 * function that loads qlik files 
	 */
	function activateMashup() {

		console.log('activateMashup');

		//load qlik css file
		const newCSS = document.createElement('link');
		newCSS.rel = 'stylesheet';
		newCSS.href = baseUrl + '/autogenerated/qlik-styles.css';
		//document.getElementsByTagName("head")[0].appendChild(newSS);
		document.head.appendChild(newCSS);

		//load the main scripts with require.js
		const require_script = document.createElement('script');
		//require_script.setAttribute("type", "text/javascript");
		require_script.setAttribute("data-main", "js/lib/main.js"); //data-main="js/lib/main.js"
		require_script.src = baseUrl + "/assets/external/requirejs/require.js";

		const container = document.querySelector('.container');
		container.parentNode.insertBefore(require_script, container.nextSibling);

    } 

})();